// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const deleteRole = `-- name: DeleteRole :execrows
DELETE
FROM roles
WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRole, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, created_at, updated_at, name, description, can_modify
FROM roles
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.CanModify,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, created_at, updated_at, name, description, can_modify
FROM roles
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, id string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.CanModify,
	)
	return i, err
}

const insertNewRole = `-- name: InsertNewRole :exec
INSERT INTO roles (id, name, description)
VALUES (UUID(), ?, ?)
`

type InsertNewRoleParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) InsertNewRole(ctx context.Context, arg InsertNewRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertNewRole, arg.Name, arg.Description)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET description = COALESCE(?, description)
WHERE id = ?
`

type UpdateRoleParams struct {
	Description sql.NullString
	ID          string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Description, arg.ID)
	return err
}
