// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, name, email, password, status, social_provider, image, verify, verification_code, role_id, scope
FROM users
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.SocialProvider,
		&i.Image,
		&i.Verify,
		&i.VerificationCode,
		&i.RoleID,
		&i.Scope,
	)
	return i, err
}

const getUserByEmailAndScope = `-- name: GetUserByEmailAndScope :one
SELECT id, created_at, updated_at, name, email, password, status, social_provider, image, verify, verification_code, role_id, scope
FROM users
WHERE email = ? and scope = ?
LIMIT 1
`

type GetUserByEmailAndScopeParams struct {
	Email string
	Scope UsersScope
}

func (q *Queries) GetUserByEmailAndScope(ctx context.Context, arg GetUserByEmailAndScopeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailAndScope, arg.Email, arg.Scope)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.SocialProvider,
		&i.Image,
		&i.Verify,
		&i.VerificationCode,
		&i.RoleID,
		&i.Scope,
	)
	return i, err
}

const insertNewUser = `-- name: InsertNewUser :exec
INSERT INTO users (id, name, email, password, status, verification_code, scope)
VALUES (UUID(), ?, ?, ?, 'request', ?, 'user')
`

type InsertNewUserParams struct {
	Name             string
	Email            string
	Password         sql.NullString
	VerificationCode sql.NullString
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.ExecContext(ctx, insertNewUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.VerificationCode,
	)
	return err
}

const insertSuperUser = `-- name: InsertSuperUser :exec
INSERT INTO users (id, name, email, password, status, scope)
VALUES (UUID(), 'Admin', ?, ?, 'active', 'admin')
`

type InsertSuperUserParams struct {
	Email    string
	Password sql.NullString
}

func (q *Queries) InsertSuperUser(ctx context.Context, arg InsertSuperUserParams) error {
	_, err := q.db.ExecContext(ctx, insertSuperUser, arg.Email, arg.Password)
	return err
}
