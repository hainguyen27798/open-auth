// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token_used.sql

package db

import (
	"context"
)

const cacheOldRefreshToken = `-- name: CacheOldRefreshToken :exec
INSERT INTO refresh_tokens_used (id, token_id, refresh_token)
VALUES (UUID(), ?, ?)
`

type CacheOldRefreshTokenParams struct {
	TokenID      string
	RefreshToken string
}

func (q *Queries) CacheOldRefreshToken(ctx context.Context, arg CacheOldRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, cacheOldRefreshToken, arg.TokenID, arg.RefreshToken)
	return err
}

const checkOldRefreshTokenExists = `-- name: CheckOldRefreshTokenExists :one
SELECT COUNT(id)
FROM refresh_tokens_used
WHERE refresh_token = ?
`

func (q *Queries) CheckOldRefreshTokenExists(ctx context.Context, refreshToken string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkOldRefreshTokenExists, refreshToken)
	var count int64
	err := row.Scan(&count)
	return count, err
}
