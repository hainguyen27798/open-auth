// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package db

import (
	"context"
)

const createNewToken = `-- name: CreateNewToken :exec
INSERT INTO tokens (id, user_id, session, refresh_token)
VALUES (UUID(), ?, ?, ?)
`

type CreateNewTokenParams struct {
	UserID       string
	Session      string
	RefreshToken string
}

func (q *Queries) CreateNewToken(ctx context.Context, arg CreateNewTokenParams) error {
	_, err := q.db.ExecContext(ctx, createNewToken, arg.UserID, arg.Session, arg.RefreshToken)
	return err
}

const getTokenBySession = `-- name: GetTokenBySession :one
SELECT id, session, refresh_token
FROM tokens
WHERE session = ?
LIMIT 1
`

type GetTokenBySessionRow struct {
	ID           string
	Session      string
	RefreshToken string
}

func (q *Queries) GetTokenBySession(ctx context.Context, session string) (GetTokenBySessionRow, error) {
	row := q.db.QueryRowContext(ctx, getTokenBySession, session)
	var i GetTokenBySessionRow
	err := row.Scan(&i.ID, &i.Session, &i.RefreshToken)
	return i, err
}

const removeToken = `-- name: RemoveToken :execrows
DELETE
FROM tokens
WHERE refresh_token = ?
`

func (q *Queries) RemoveToken(ctx context.Context, refreshToken string) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeToken, refreshToken)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE tokens
SET refresh_token = ?
WHERE id = ?
`

type UpdateRefreshTokenParams struct {
	RefreshToken string
	ID           string
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.RefreshToken, arg.ID)
	return err
}
